apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"

def credentialFile = rootProject.file("credentials.properties")
def credentialProperty = new Properties()
if (credentialFile.exists()) { // If someone just cloned the repo, they wouldn't have the credentials file but don't really need it.
    credentialProperty.load(new FileInputStream(credentialFile))
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.aniketkadam.temperatureapp"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.aniketkadam.temperatureapp.TestInstrumentationRunner"
        buildConfigField 'String', "WEATHER_API_KEY", credentialProperty.get('weather_api_key')
    }
    buildTypes {
        debug {
            multiDexEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
    
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation androidxDependencies.appCompat
    implementation ktxdep.lib
    implementation adxconstraintlayout.lib
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation testlib.junit


    // Testing
    testImplementation testlib.junit
    androidTestImplementation testlib.junit

    androidTestImplementation adxTestLib.runner
    androidTestImplementation adxTestLib.rules
    androidTestImplementation adxTestLib.testext
    androidTestImplementation adxTestLib.espresso
    androidTestImplementation adxTestLib.espressoContrib
    androidTestImplementation lifecycle.testhelper

    // Robolectric and everything it needs for its hybrid unit+instrumentation tests
    testImplementation adxTestLib.runner
    testImplementation adxTestLib.core
    androidTestImplementation adxTestLib.core
    testImplementation lifecycle.testhelper

    // Rxjava
    implementation rxjava.lib
    implementation rxjava.android

    // Dagger
    implementation dagger.lib
    kapt dagger.compiler
    kaptAndroidTest dagger.compiler
    implementation dagger.android
    implementation dagger.support
    kapt dagger.androidAnnotationProcessor
    kaptAndroidTest dagger.androidAnnotationProcessor

    // Required to keep dagger 2.19 from being replaced by 2.16 and broken by jetifier.
    kapt jetifier.core
    annotationProcessor jetifier.core

    // Network
    implementation retrofit.lib
    implementation retrofit.adapters
    implementation retrofit.gsonconverter
    implementation gson.lib
    implementation okhttp.lib
    implementation okhttp.interceptor

    testImplementation mockito.lib
    testImplementation mockito.android
    androidTestImplementation mockito.android

    testImplementation hamcrest.lib
    androidTestImplementation hamcrest.lib

    implementation timber.lib

    // Lifecycle/Architecture
    implementation lifecycle.extensions
    kapt lifecycle.kotlinCompiler
    implementation lifecycle.reactivestreams

    testImplementation mockito.inline

    // Navigation
    implementation navigation.fragment
    implementation navigation.ui

    implementation time.lib

    testImplementation mockk.lib
    androidTestImplementation mockk.android

    testImplementation livedataCommunityTestHelper.lib

    androidTestImplementation restMockServer.lib

    androidTestImplementation multidex.lib

    androidTestImplementation externalIdlingResources.okhttp
}
